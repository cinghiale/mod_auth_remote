###################################################################################################
#             Mod_Auth_Remote - remote authentication module for apache 2.2
#             Author:  Saju Pillai (saju.pillai@gmail.com)
#                  
#
#  mod_auth_remote is as an authentication provider. mod_auth_remote is configured with an
#  authentication server url. The authentication server url is an application usually hosted
#  by another webserver or webservice which is responsible for the actual authentication of
#  users.
#
#  mod_auth_remote accepts HTTP BASIC authentication requests and proxies a HTTP BASIC 
#  Auth 'HEAD' request to the authentication server url on the local requests behalf.
#  The authentication server may allow or decline authentication based on it's policy. If the 
#  response from the authentication server is a SUCCESS code (2XX), mod_auth_remote will grant 
#  AUTHENTICATION on the local server. For all other responses mod_auth_remote will deny local 
#  AUTHENTICATION.
#
#
#  Using mod_auth_remote gives you the following advantages
#
#  * Simple way to implement Single-Signon. Same set of credentials can be used by 
#    many applications/webservers.
#
#  * No need to replicate your authentication framework to all your applications
#      -- No need to punch holes through your firewall for sql access or ldap access as part of 
#         your authentication setup.
#      -- Authentication server need not be publicly accessible to actual clients
#      -- Tweak your authentication mechanism and ACLs without touching the fronting webservers
#
#  * A single webserver can have different URLs/applications authenticating from many 
#    different authentication servers without duplicating any of their configuration or code.
#
#  * If you use mod_auth_remote's AuthRemoteCookie support you can decrease load on the 
#    authenticating servers drastically, as only 1 backend authentication per session is required.
#
#  This is a complete rewrite of mod_auth_remote specifically for apache 2.2 (& apr 1.3). 
#  I intend to add new functionality only to this version for now.
#
#  Latest dev mod_auth_remote code is at http://github.com/saju/mod_auth_remote/tree/master
#
#  mod_auth_remote for httpd 1.3 and 2.0 can be found at http://saju.pillai.googlepages.com/mod_auth_remote
#


########################################################################################################
#
# Note on Contributors.
#
# At various times, the following people have either ported or patched mod_auth_remote 
# or/and built and hosted binaries on various platforms. Many thanks
#
# Pascal Terjan, Oden Eriksson, Jean-Michel Dault, Guenter Knauf, Ian C.Blenke
#

#########################################################################################################
#
# Note on AuthRemoteCookie. 
#
# AuthRemoteCookie is a mechanism to cache the state of a backend authentication request in a http cookie 
# for a short period of time in an attempt to decrease the load on the backend.
#
# AuthRemoteCookie Cookie_Name <Cookie_Path> <Cookie_Duration>
#
# AuthRemoteCookie accepts a mandatory Cookie Name and a optional Cookie Path and Cookie Duration.
# When this directive is present, mod_auth_remote sets a cookie after a successful backend authentication.
#
# If there are multiple configurations of mod_auth_remote for a server that use AuthRemoteCookie, each
# Cookie_Name must be unique
#
# The cookie is *always* a Session cookie. The Cookie_Duration is the number of *seconds* that
# mod_auth_remote will honour the cookie. The default duration is 1200s (20 mins). The cookie is 
# deleted by the browser when it is closed. When a request with this cookie comes in, mod_auth_remote 
# will verify if the cookie is younger than the Cookie_Duration, if not, an explicit backend authentication
#  is performed. The cookie will be reset if the authentication succeeds.
#
# The Cookie_Path is the path for which the cookie will be sent back by the browser. It is a very good idea 
# to make sure that the Cookie_Path is set to the root directory/path of your protected urls.
# i.e.
# <Directory ~ "/foo">
#   AuthRemoteCookie crumbs /foo
# </Directory>
#  -- and --
# <DirectoryMatch ~ "^/bar/.*/">
#   AuthRemoteCookie waffles /bar 150
# </DirectoryMatch>
# are good examples of configuring the Cookie_Path.
#
# Misconfiguring the Cookie_Path is *not* a security hole, at worst it will only result in a backend 
# authentication for every request. The Cookie_Path defaults to "/", this means the cookie is sent to 
# the server for all requests. This is again not a secuity hole as the cookie does not contain any 
# sensitive information.
#
# The cookie created by AuthRemoteCookie is reasonably secure. It contains the username, a timestamp 
# and a checksum. To use AuthRemoteCookie, mod_auth_remote requires the apr_random.h apis. If these 
# apis are not available the cookie will not work. It is possible to turn off the cookie code entirely 
# by supplying the AUTH_REMOTE_NO_SALT flag while compiling mod_auth_remote.c
#


######################################################################################################
#
#  configuration examples
#

<IfModule !mod_auth_remote.c>
   LoadModule auth_remote_module modules/mod_auth_remote.so
</IfModule>

#
# Protects /foo
# The authentication url is http://www.example.com:1979/safe/page
#
<Directory  ~ "/hr">
    AuthType           Basic
    AuthName           HR_APPLICATION
    AuthRemoteServer   www.example.com
    AuthRemotePort     1979
    AuthRemoteURL      /safe/page
    AuthBasicProvider  remote	
    Require            valid-user
</Directory>

#
# Protects /fin
# Authentication url is http://auth.example.com/login
#
<Directory  ~ "/fin">
    AuthType           Basic
    AuthName           "FIN Secure"
    AuthBasicProvider  remote	
    AuthRemoteURL      http://auth.example.com/login
    Require            valid-user
</Directory>

#
# Protects /payroll
# Authentication url is http://auth.example.com:4200/login
#
# On successful authentication a cookie named "Payroll_auth" is set with a lifetime of
# 2 minutes. For the next 2 minutes all requests from the logged in user for urls starting 
# with /payroll/stuff will be authenticated locally (without involving the authentication server).
#
<Directory  ~ "/payroll">
    AuthType           Basic
    AuthName           "who goes there"
    AuthBasicProvider  remote	
    AuthRemoteURL      http://money.example.com:4200/login
    AuthRemoteCookie   Payroll_auth /payroll 120
    Require            valid-user
</Directory>

#
# Protects /cafeteria
# Authentication url is http://auth.example.com:2008/
#
# On successful authentication a cookie named "CAFE" is set with a lifetime of
# 20 minutes (default). For the next 2 minutes all requests from the logged in user 
# that will be handled by the this instance of mod_auth_remote (i.e. for url ~ "/cafeteria") 
# will be authenticated locally (without involving the authentication server).
#
<Directory  ~ "/cafeteria">
    AuthType           Basic
    AuthName           "hungry yet ?"
    AuthBasicProvider  remote	
    AuthRemoteURL      http://kapi.example.com:2008
    AuthRemoteCookie   CAFE
    Require            valid-user
</Directory>